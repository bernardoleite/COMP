/* Generated By:JJTree: Do not edit this line. ASTScalarAccess.java Version 6.0 */
/* JavaCCOptions:MULTI=true,NODE_USES_PARSER=false,VISITOR=true,TRACK_TOKENS=false,NODE_PREFIX=AST,NODE_EXTENDS=,NODE_FACTORY=,SUPPORT_CLASS_VISIBILITY_PUBLIC=true */
public
class ASTScalarAccess extends SimpleNode {
  private String name;
  private String size = null;
  private Token t;

  public ASTScalarAccess(int id) {
    super(id);
  }

  public ASTScalarAccess(YAL2JVM p, int id) {
    super(p, id);
  }
  public String getName() {
    return name;
  }
  public void setName(String name) {
    this.name = name;
  }

  public String getSize() {
    return size;
  }

  public void setSize(String size) {
    this.size = size;
  }

  public void setToken(Token t) {
    this.t = t;
  }

  public String toString() {
    String test = super.toString();
    return test + " " + name;
  }

  @Override
  public boolean analyse(Table currentTable) {
    Symbol var = currentTable.lookup(name);
    if(var != null) {
      if(!var.getType().equals("Variable")) {
        System.out.println("Isn't a Variable " +name + " at line: " + t.beginLine);
        return true;
      }
      if(size == null) {
        if(var.getScalarOrArray() != 0)
          System.out.println("Isn't a Scalar " + name + " at line: " + t.beginLine);
        return true;
      }
      else {
        if(var.getScalarOrArray() != 1)
          System.out.println("Isn't an Array " + name + " at line: " + t.beginLine);
        return true;
      }

    }
    return true;
  }

      @Override
  public boolean analyseLeft(Table currentTable, int j) {
    if(j == -1)
      j = 0;
    Symbol var = currentTable.lookup(name);
    if(var == null) {
      System.out.println("Saving ScalarAccess " +name);
      currentTable.save(new Symbol(name, j, "Variable"));
      return true;
    }
    else {
      if(var.getScalarOrArray() != 1 && var.getScalarOrArray() != j) {
        System.out.println("Not the same Type!! " +name + " at line: " + t.beginLine);
        return false;
      }
    }
    return true;
  }

  public int checkScalarOrArray(Table currentTable) {
    Symbol var = currentTable.lookup(name);
    if(var == null) {
      System.out.println("Variable doesn't exist! " +name + " at line: " + t.beginLine);
      return -1;
    }
    if(var.getScalarOrArray() == 1 && size != null)
      return 0;
    return var.getScalarOrArray();
  }
  /** Accept the visitor. **/
  public Object jjtAccept(YAL2JVMVisitor visitor, Object data) {

    return
    visitor.visit(this, data);
  }
}
/* JavaCC - OriginalChecksum=ecf31aebacc54a2f813d60394019ca90 (do not edit this line) */
