options
{
 LOOKAHEAD=1;
 MULTI = true;
 static = false;
}

PARSER_BEGIN(YAL2JVM)
import java.io.* ;
// código Java que invoca o parser
public class YAL2JVM {

public int errors = 0; // use this variable in order to control the maximum of errors (10)
public int line = 0;
public int column = 0;

 public static void main(String args[]) throws ParseException {
// criação do objecto utilizando o constructor com argumento para
// ler do standard input (teclado)
 YAL2JVMTokenManager tm;

  if (args.length<1) {
        System.out.println("Ficheiro não especificado!");
        System.exit(1);
  }
  try{
      java.io.InputStream infile;
      infile = new java.io.FileInputStream(args[0]);
      tm = new   YAL2JVMTokenManager(new SimpleCharStream(infile));
      System.out.println("Ficheiro lido com sucesso!");
      YAL2JVM parser = new YAL2JVM(infile);
      ASTModule module = parser.Module();
      module.dump("");
      System.out.println("Leitura terminada.");
  }
  catch (java.io.FileNotFoundException e) {
      System.out.println("Ficheiro "+args[0]+" não encontrado");
      return;
    }

 }

}
PARSER_END(YAL2JVM)


JAVACODE
void skipt_do_not_consume_last(ParseException e, String expr, int kind) {


  if(errors == 0) {
    System.out.println("--->Exception Catched!!! The message: <---");
    System.out.println();
  }

  errors++;
  System.out.println();
  System.out.println("yal2jvm.jj:error: Something went wrong on " + expr);
  System.out.println(e.currentToken.next.image + " <-- Line:" + e.currentToken.beginLine + ", column:" + e.currentToken.next.beginColumn);
  System.out.println("Expecting: ");
  for(int i = 0; i < e.expectedTokenSequences.length; i++) {
    for(int j = 0; j < e.expectedTokenSequences[i].length; j++) {
      System.out.println(tokenImage[e.expectedTokenSequences[i][j]]);
    }
  }
  System.out.println();

  System.out.println("Number Errors: " +errors);

  int token_kind;
  Token t;
  boolean canI = false;
  do {

    if(canI) {
      t = getNextToken();
    }
    token_kind = jj_ntk_f();
    canI = true;
  } while (token_kind != kind);
}
JAVACODE
void error_control(ParseException e, String expr, int skipKind) {


    if(errors == 0) {
      System.out.println("--->Exception Catched!!! The message: <---");
      System.out.println();
    }

    errors++;
    System.out.println();
    System.out.println("yal2jvm.jj:error: Something went wrong on " + expr);
    System.out.println(e.currentToken.next.image + " <-- Line:" + e.currentToken.beginLine + ", column:" + e.currentToken.next.beginColumn);
    System.out.println("Expecting: ");
    for(int i = 0; i < e.expectedTokenSequences.length; i++) {
      for(int j = 0; j < e.expectedTokenSequences[i].length; j++) {
        System.out.println(tokenImage[e.expectedTokenSequences[i][j]]);
      }
    }
    System.out.println();

    System.out.println("Number Errors: " +errors);

    if(errors > 10) {
      System.out.println("You have at least 10 errors!!!");
      System.exit(1);
    }


    Token t;
    do {
      t = getNextToken();
      System.out.println("Image " + t.image);

    } while (t.kind != skipKind);


}

// símbolos que não devem ser considerados na análise
SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"
  | <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
  | <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}
// definição dos tokens (símbolos terminais)
/* reserved words */
<DEFAULT> TOKEN : {
<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
| <ADDSUB_OP: "+" | "-">
| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
| <BITWISE_OP: "&" | "|" | "^">
| <NOT_OP: "!">
| <WHILE: "while">
| <IF: "if">
| <ELSE: "else">
| <ASSIGN: "=">
| <ASPA: "\"">
| <LPAR: "(">
| <RPAR: ")">
| <VIRG: ",">
| <PVIRG: ";">
| <LCHAVETA: "{">
| <RCHAVETA: "}">
| <FUNCTION: "function">
| <MODULE: "module">
| <SIZE: "size">
}

<DEFAULT> TOKEN : {
<INTEGER: (<DIGIT>)+>
| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
| <#DIGIT: ["0"-"9"]>
| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

// definição da produção

ASTModule Module() : {Token t;}
{

  <MODULE> t=<ID>{jjtThis.setName(t.image);} <LCHAVETA>  (LOOKAHEAD(2) Declaration() )*
  try {
    ( Function() )*  <RCHAVETA>
  } catch(ParseException e) {
    error_control(e, "Module", RCHAVETA);
  }
  {return jjtThis;}
}

void Declaration() : {}
{
  try {
  (LOOKAHEAD(<ID>"[""]") ArrayElement() | ScalarElement() ) ( <ASSIGN> ( ( "[" ArraySize() "]" ) | (
  <ADDSUB_OP> )? <INTEGER> ) )? <PVIRG>
  } catch(ParseException e) {
    error_control(e, "Declaration", PVIRG);
  }
}

void Function() : {Token t;}
{
    try {
    <FUNCTION> ( LOOKAHEAD(2)( (LOOKAHEAD(<ID>"[""]") ArrayElement() | ScalarElement() ) <ASSIGN> t=<ID> ) | (
    t=<ID> ) ) <LPAR> {jjtThis.setName(t.image);}
  } catch(ParseException e) {
    error_control(e, "Function", LPAR);
  }
  try {
  ( Varlist() )? <RPAR>
  } catch(ParseException e) {
    error_control(e, "Function", RPAR);
  }
  <LCHAVETA> Stmtlst() <RCHAVETA>
}

void Varlist() : {}
{
  try {
  (LOOKAHEAD(2) ArrayElement() | ScalarElement() ) ( <VIRG> (LOOKAHEAD(2) ArrayElement() | ScalarElement() ))*
  } catch(ParseException e) {

    skipt_do_not_consume_last(e, "Varlist", RPAR);
  }
}

void ArrayElement() : {Token t;}
{

    t=<ID> "[" "]"
    {jjtThis.setName(t.image);}
}

void ScalarElement() : {Token t;}
{

    t=<ID>
    {jjtThis.setName(t.image);}
}

void Stmtlst() : {}
{

    ( Stmt() )*

}

void Stmt() : {}
{
  try {
  While()
  | If()
  | LOOKAHEAD(3) Assign()
  | Call() <PVIRG>
  } catch(ParseException e) {
    error_control(e, "Stmt", PVIRG);
  }
}

void Assign() : {}
{

  Lhs() <ASSIGN> Rhs() <PVIRG>

}

void Lhs() : {}
{

  LOOKAHEAD(<ID>"[") ArrayAccess()
  | ScalarAccess()

}

void Rhs() : {Token t;}
{

  ( Term() ( ( t=<ARITH_OP>   {jjtThis.setOp(t.image);}
  | t=<BITWISE_OP>   {jjtThis.setOp(t.image);}
  | t=<ADDSUB_OP>   {jjtThis.setOp(t.image);})
  Term() )? )
  | "[" ArraySize() "]"


}

void ArraySize() : {Token t;}
{

  ScalarAccess()
  | ( t=<INTEGER>  {jjtThis.setName(t.image);} )

}

void Term() : {Token t1, t2;}
{

  ( t1=<ADDSUB_OP> {jjtThis.setOp(t1.image);} )?
  ( t2=<INTEGER> {jjtThis.setName(t2.image);}  |LOOKAHEAD(3) Call() |LOOKAHEAD(<ID>"[") ArrayAccess() | ScalarAccess() )

}

void Exprtest() : {}
{
  try {
  <LPAR> Lhs() <RELA_OP> Rhs() <RPAR>
  } catch(ParseException e) {
    error_control(e, "Exprtest", RPAR);
  }
}

void While() : {}
{
  try {
    <WHILE> Exprtest() <LCHAVETA>
  } catch(ParseException e) {
    error_control(e, "While", LCHAVETA);
  }
  Stmtlst() <RCHAVETA>
}

void If() : {}
{
  try {
    <IF> Exprtest() <LCHAVETA>
  } catch(ParseException e) {
    error_control(e, "If", LCHAVETA);
  }
  Stmtlst() <RCHAVETA>
  ( <ELSE> <LCHAVETA>
  Stmtlst() <RCHAVETA> )?

}

void Call() : {}
{

  <ID> ( "." <ID> )? <LPAR> ( ArgumentList() )? <RPAR>

}

void ArgumentList() : {}
{

    Argument() ( <VIRG> Argument() )*

}

void Argument() : {}
{

  ( <ID> | <STRING> | <INTEGER> )

}

void ArrayAccess() : {}
{

  <ID> "[" Index() "]"

}

void ScalarAccess() : {Token t;}
{

  t=<ID> ( "." <SIZE> )?
  {jjtThis.setName(t.image);}
}

void Index() : {}
{

  <ID>
  | <INTEGER>

}
