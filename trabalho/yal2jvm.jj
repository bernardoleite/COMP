options
{
 LOOKAHEAD=1;
 static = false;
}

PARSER_BEGIN(YAL2JVM)
import java.io.* ;
// código Java que invoca o parser
public class YAL2JVM {

public int errors = 0; // use this variable in order to control the maximum of errors (10)
public int line = 0;
public int column = 0;

 public static void main(String args[]) throws ParseException {
// criação do objecto utilizando o constructor com argumento para
// ler do standard input (teclado)
 YAL2JVMTokenManager tm;

  if (args.length<1) {
        System.out.println("Ficheiro não especificado!");
        System.exit(1);
  }
  try{
      java.io.InputStream infile;
      infile = new java.io.FileInputStream(args[0]);
      tm = new   YAL2JVMTokenManager(new SimpleCharStream(infile));
      System.out.println("Ficheiro lido com sucesso!");
      YAL2JVM parser = new YAL2JVM(infile);
      parser.Sentence();
      System.out.println("Leitura terminada.");
  }
  catch (java.io.FileNotFoundException e) {
      System.out.println("Ficheiro "+args[0]+" não encontrado");
      return;
    }

 }

void error_skipto(int kind) {
  ParseException e = generateParseException();
  System.out.println(e.toString());
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);
}

void error_control(ParseException e, String expr) {

  if(expr != "1") {

    errors++;
    if(!(line == e.currentToken.beginLine && column == e.currentToken.beginColumn)) {
      System.out.println("yal2jvm.jj:error: Something went wrong on " + expr);
      System.out.println(e.currentToken.image + " <-- Line:" + e.currentToken.beginLine + ", column:" + e.currentToken.beginColumn);
      line = e.currentToken.beginLine;
      column = e.currentToken.beginColumn;
    }
  } else {
    System.out.println("--->Exception Catched!!! The message: <---");
  }
  if(errors > 10)
    System.exit(1);

}

}
PARSER_END(YAL2JVM)


void Sentence():
{}
{
  try{
    Module()
  }catch (ParseException e){
  error_control(e, "1");
  //error_skipto(PVIRG); //Descomentar para o programar continuar até encontrar Ponto e Virgula
  }
}


// símbolos que não devem ser considerados na análise
SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"
  | <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
  | <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}
// definição dos tokens (símbolos terminais)
/* reserved words */
<DEFAULT> TOKEN : {
<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
| <ADDSUB_OP: "+" | "-">
| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
| <BITWISE_OP: "&" | "|" | "^">
| <NOT_OP: "!">
| <WHILE: "while">
| <IF: "if">
| <ELSE: "else">
| <ASSIGN: "=">
| <ASPA: "\"">
| <LPAR: "(">
| <RPAR: ")">
| <VIRG: ",">
| <PVIRG: ";">
| <LCHAVETA: "{">
| <RCHAVETA: "}">
| <FUNCTION: "function">
| <MODULE: "module">
| <SIZE: "size">
}

<DEFAULT> TOKEN : {
<INTEGER: (<DIGIT>)+>
| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
| <#DIGIT: ["0"-"9"]>
| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

// definição da produção

void Module() : {}
{
  try{
  <MODULE> <ID> <LCHAVETA>
  (LOOKAHEAD(2) Declaration() )* ( Function() )*
  <RCHAVETA>
  }
  catch(ParseException e){
      error_control(e, "Module");
  }

}

void Declaration() : {}
{
  try{
  (LOOKAHEAD(<ID>"[""]") ArrayElement() | ScalarElement() ) ( <ASSIGN> ( ( "[" ArraySize() "]" ) | (
  <ADDSUB_OP> )? <INTEGER> ) )? <PVIRG>
  }
  catch(ParseException e){
      error_control(e, "Declaration");

}

}

void Function() : {}
{
  try{
  ( LOOKAHEAD(3)( <FUNCTION> (LOOKAHEAD(<ID>"[""]") ArrayElement() | ScalarElement() ) <ASSIGN> <ID> <LPAR> (
  Varlist() )? <RPAR> ) | ( <FUNCTION> <ID> <LPAR> ( Varlist() )? <RPAR> ) )
  <LCHAVETA> Stmtlst() <RCHAVETA>
  }
  catch(ParseException e){
      error_control(e, "Function");
  }

}

void Varlist() : {}
{
  try{
  (LOOKAHEAD(2) ArrayElement() | ScalarElement() ) ( <VIRG> (LOOKAHEAD(<ID>"[""]") ArrayElement() | ScalarElement() ))*
  }
  catch(ParseException e){
      error_control(e, "Varlist");
  }
}

void ArrayElement() : {}
{
  try{
  <ID> "[" "]"
  }
  catch(ParseException e){
      error_control(e, "ArrayElement");
  }
}

void ScalarElement() : {}
{
  try{
  <ID>
  }
  catch(ParseException e){
      error_control(e, "ScalarElement");
  }
}

void Stmtlst() : {}
{
  try{
    ( Stmt() )*
    }
  catch(ParseException e){
      error_control(e, "Stmtlst");
    }
}

void Stmt() : {}
{
  try{
  While()
  | If()
  | LOOKAHEAD(3) Assign()
  | Call() <PVIRG>
  }
  catch(ParseException e){
      error_control(e, "Stmt");
    }
}

void Assign() : {}
{
  try{
  Lhs() <ASSIGN> Rhs() <PVIRG>
  }
  catch(ParseException e){
      error_control(e, "Assign");
    }
}

void Lhs() : {}
{
  try{
  LOOKAHEAD(<ID>"[") ArrayAccess()
  | ScalarAccess()
  }
  catch(ParseException e){
      error_control(e, "Lhs");
    }
}

void Rhs() : {}
{
  try{
  ( Term() ( ( <ARITH_OP> | <BITWISE_OP> | <ADDSUB_OP> ) Term() )? )
  | "[" ArraySize() "]"
  }
  catch(ParseException e){
      error_control(e, "Rhs");
    }
}

void ArraySize() : {}
{
  try{
  ScalarAccess()
  | <INTEGER>
  }
  catch(ParseException e){
      error_control(e, "ArraySize");
  }
}

void Term() : {}
{
  try{
  ( <ADDSUB_OP> )? ( <INTEGER> |LOOKAHEAD(3) Call() |LOOKAHEAD(<ID>"[") ArrayAccess() | ScalarAccess() )
  }
  catch(ParseException e){
      error_control(e, "Term");
  }
}

void Exprtest() : {}
{
  try{
  <LPAR> Lhs() <RELA_OP> Rhs() <RPAR>
  }
  catch(ParseException e){
      error_control(e, "Exprtest");
  }
}

void While() : {}
{
  try{
  <WHILE> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA>
  }
  catch(ParseException e){
      error_control(e, "While");
  }
}

void If() : {}
{
  try{
  <IF> Exprtest() <LCHAVETA> Stmtlst() <RCHAVETA> ( <ELSE> <LCHAVETA>
  Stmtlst() <RCHAVETA> )?
  }
  catch(ParseException e){
      error_control(e, "If");
  }
}

void Call() : {}
{
  try{
  <ID> ( "." <ID> )? <LPAR> ( ArgumentList() )? <RPAR>
  }
  catch(ParseException e){
      error_control(e, "Call");
  }
}

void ArgumentList() : {}
{
    try{
    Argument() ( <VIRG> Argument() )*
    }
    catch(ParseException e){
        error_control(e, "ArgumentList");
    }
}

void Argument() : {}
{
  try{
  ( <ID> | <STRING> | <INTEGER> )
  }
  catch(ParseException e){
      error_control(e, "Argument");
  }
}

void ArrayAccess() : {}
{
  try{
  <ID> "[" Index() "]"
  }
  catch(ParseException e){
      error_control(e, "ArrayAccess");
  }
}

void ScalarAccess() : {}
{
  try{
  <ID> ( "." <SIZE> )?
  }
  catch(ParseException e){
      error_control(e, "ScalarAccess");
  }
}

void Index() : {}
{
  try {
  <ID>
  | <INTEGER>
  }
  catch(ParseException e){
      error_control(e, "Index");
  }
}
