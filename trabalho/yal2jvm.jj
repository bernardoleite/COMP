/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. yal2jvm.jj */
/*@egen*/options
{
 LOOKAHEAD=1;
              
 static = false;
                
}

PARSER_BEGIN(YAL2JVM)
import java.io.* ;
// c\u00f3digo Java que invoca o parser
public class YAL2JVM/*@bgen(jjtree)*/implements YAL2JVMTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTYAL2JVMState jjtree = new JJTYAL2JVMState();

/*@egen*/

public static int errors = 0; // use this variable in order to control the maximum of errors (10)
public int line = 0;
public int column = 0;

 public static void main(String args[]) throws ParseException {
// cria\u00e7\u00e3o do objecto utilizando o constructor com argumento para
// ler do standard input (teclado)
 YAL2JVMTokenManager tm;
  if (args.length<1) {
        System.out.println("Ficheiro n\u00e3o especificado!");
        System.exit(1);
  }
  try{
      java.io.InputStream infile;
      infile = new java.io.FileInputStream(args[0]);

      tm = new   YAL2JVMTokenManager(new SimpleCharStream(infile));
      System.out.println("Ficheiro lido com sucesso!");

      YAL2JVM parser = new YAL2JVM(infile);
      ASTModule module = parser.Module();
      module.dump("");
      System.out.println("Leitura terminada.");
      if(errors>0){
        System.out.println("Fix Errors!!!");
        System.exit(0);
      }
      if(!module.analyse(null)){
        System.out.println("Warning!!! You have errors and you should fix them\n Generated Code may be incorrect!!!");
        System.exit(0);
      }
      //Code to Traverse Tree
      PostorderVisitor v = new PostorderVisitor();
      module.jjtAccept(v,null);
      v.reverseStack();

        System.out.println("----------");
      System.out.println();


      for(int i = 0; i < v.getStack().size(); i++){
          System.out.println(v.getStack().get(i).getType()+": "+v.getStack().get(i).getName());
        }

      System.out.println("----------");
      System.out.println();

      GenByteCode progj = new GenByteCode(v.getStack());

      System.out.println("----------");
      System.out.println();

      progj.printIR();

      System.out.println("----------");
      System.out.println();

      progj.printLines();
      String filename = args[0];

      int lastSeparatorIndex = filename.lastIndexOf("/");
      if (lastSeparatorIndex == -1) {
        lastSeparatorIndex = filename.lastIndexOf("\\");
        if (lastSeparatorIndex == -1) {
          filename = filename;
        } else {
            filename = filename.substring(lastSeparatorIndex + 1);
        }
      } else {
          filename = filename.substring(lastSeparatorIndex + 1);
      }

      int extensionIndex = filename.lastIndexOf(".");

      filename = filename.substring(0, extensionIndex);
      filename += ".j";
      progj.writeToFile(filename);

  }
  catch (java.io.FileNotFoundException e) {
      System.out.println("Ficheiro "+args[0]+" n\u00e3o encontrado");
      return;
    }

 }

}
PARSER_END(YAL2JVM)


JAVACODE
void skipt_do_not_consume_last(ParseException e, String expr, int kind) {/*@bgen(jjtree) skipt_do_not_consume_last */
ASTskipt_do_not_consume_last jjtn000 = new ASTskipt_do_not_consume_last(JJTSKIPT_DO_NOT_CONSUME_LAST);
boolean jjtc000 = true;
jjtree.openNodeScope(jjtn000);
try {
/*@egen*/


  if(errors == 0) {
    System.out.println("--->Exception Catched!!! The message: <---");
    System.out.println();
  }

  errors++;
  System.out.println();
  System.out.println("yal2jvm.jj:error: Something went wrong on " + expr);
  System.out.println(e.currentToken.next.image + " <-- Line:" + e.currentToken.beginLine + ", column:" + e.currentToken.next.beginColumn);
  System.out.println("Expecting: ");
  for(int i = 0; i < e.expectedTokenSequences.length; i++) {
    for(int j = 0; j < e.expectedTokenSequences[i].length; j++) {
      System.out.println(tokenImage[e.expectedTokenSequences[i][j]]);
    }
  }
  System.out.println();

  System.out.println("Number Errors: " +errors);

  int token_kind;
  Token t;
  boolean canI = false;
  do {

    if(canI) {
      t = getNextToken();
    }
    token_kind = jj_ntk_f();
    canI = true;
  } while (token_kind != kind);/*@bgen(jjtree)*/
} finally {
  if (jjtc000) {
    jjtree.closeNodeScope(jjtn000, true);
  }
}
/*@egen*/
}
JAVACODE
void error_control(ParseException e, String expr, int skipKind) {/*@bgen(jjtree) error_control */
 ASTerror_control jjtn000 = new ASTerror_control(JJTERROR_CONTROL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 try {
/*@egen*/

    ParseException p = generateParseException();
    if(errors == 0) {
      System.out.println("--->Exception Catched!!! The message: <---");
      System.out.println();
    }

    errors++;
    System.out.println();
    System.out.println("yal2jvm.jj:error: Something went wrong on!!!");
    System.out.println(p.currentToken.next.image + " <-- Line:" + p.currentToken.beginLine + ", column:" + p.currentToken.next.beginColumn);
    System.out.println("Expecting: ");
    for(int i = 0; i < p.expectedTokenSequences.length; i++) {
      for(int j = 0; j < p.expectedTokenSequences[i].length; j++) {
        System.out.println(tokenImage[p.expectedTokenSequences[i][j]]);
      }
    }
    System.out.println();

    System.out.println("Number Errors: " +errors);

    if(errors > 10) {
      System.out.println("You have at least 10 errors!!!");
      System.exit(1);
    }


    Token t;
    do {
      t = getNextToken();

    } while (t.kind != skipKind);/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/


}

// s\u00edmbolos que n\u00e3o devem ser considerados na an\u00e1lise
SKIP :
{
  " "
  | "\t"
  | "\n"
  | "\r"
  | <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")>
  | <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}
// defini\u00e7\u00e3o dos tokens (s\u00edmbolos terminais)
/* reserved words */
<DEFAULT> TOKEN : {
<RELA_OP: ">" | "<" | "<=" | ">=" | "==" | "!=">
| <ADDSUB_OP: "+" | "-">
| <ARITH_OP: "*" | "/" | "<<" | ">>" | ">>>">
| <BITWISE_OP: "&" | "|" | "^">
| <NOT_OP: "!">
| <WHILE: "while">
| <IF: "if">
| <ELSE: "else">
| <ASSIGN: "=">
| <ASPA: "\"">
| <LPAR: "(">
| <RPAR: ")">
| <VIRG: ",">
| <PVIRG: ";">
| <LCHAVETA: "{">
| <RCHAVETA: "}">
| <FUNCTION: "function">
| <MODULE: "module">
| <SIZE: "size">
}

<DEFAULT> TOKEN : {
<INTEGER: (<DIGIT>)+>
| <ID: <LETTER> (<LETTER> | <DIGIT>)*>
| <#LETTER: ["$","A"-"Z","_","a"-"z"]>
| <#DIGIT: ["0"-"9"]>
| <STRING: "\"" (["a"-"z","A"-"Z","0"-"9",":"," ","="])+ "\"">
}

// defini\u00e7\u00e3o da produ\u00e7\u00e3o

ASTModule Module() : {/*@bgen(jjtree) Module */
                      ASTModule jjtn000 = new ASTModule(JJTMODULE);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Module */
  try {
/*@egen*/

  <MODULE> t=<ID>{jjtn000.setName(t.image);} <LCHAVETA>  (LOOKAHEAD(2) Declaration() )*
  try {
    ( Function() )*  <RCHAVETA>
  } catch(ParseException e) {
    error_control(e, "Module", RCHAVETA);
  }/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Declaration() : {/*@bgen(jjtree) Declaration */
                      ASTDeclaration jjtn000 = new ASTDeclaration(JJTDECLARATION);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token num; Token op;}
{/*@bgen(jjtree) Declaration */
  try {
/*@egen*/
  try {
  (LOOKAHEAD(<ID>"[""]") ArrayElement() | ScalarElement() ) ( <ASSIGN> ( ( "[" ArraySize() "]" ) | (
  op=<ADDSUB_OP>{jjtn000.setOp(op.image);} )? num=<INTEGER>{jjtn000.setNumber(num.image);} ) )? <PVIRG>
  } catch(ParseException e) {
    error_control(e, "Declaration", PVIRG);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Function() : {/*@bgen(jjtree) Function */
                   ASTFunction jjtn000 = new ASTFunction(JJTFUNCTION);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Function */
    try {
/*@egen*/
    try {
    <FUNCTION>
    ( LOOKAHEAD(2)( (LOOKAHEAD(<ID>"[""]") ArrayElement() | ScalarElement() ) <ASSIGN> t=<ID> ) | (
    t=<ID> ) ) <LPAR> {jjtn000.setName(t.image); jjtn000.setToken(t);}
  } catch(ParseException e) {
    error_control(e, "Function", LPAR);
  }
  try {
  ( Varlist() )? <RPAR>
  } catch(ParseException e) {
    error_control(e, "Function", RPAR);
  }
  <LCHAVETA> Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Varlist() : {/*@bgen(jjtree) Varlist */
  ASTVarlist jjtn000 = new ASTVarlist(JJTVARLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Varlist */
  try {
/*@egen*/
  try {
  (LOOKAHEAD(2) ArrayElement() | ScalarElement() ) ( <VIRG> (LOOKAHEAD(2) ArrayElement() | ScalarElement() ))*
  } catch(ParseException e) {

    skipt_do_not_consume_last(e, "Varlist", RPAR);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ArrayElement() : {/*@bgen(jjtree) ArrayElement */
                       ASTArrayElement jjtn000 = new ASTArrayElement(JJTARRAYELEMENT);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ArrayElement */
    try {
/*@egen*/

    t=<ID> "[" "]"/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {jjtn000.setName(t.image); jjtn000.setToken(t);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void ScalarElement() : {/*@bgen(jjtree) ScalarElement */
                        ASTScalarElement jjtn000 = new ASTScalarElement(JJTSCALARELEMENT);
                        boolean jjtc000 = true;
                        jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ScalarElement */
    try {
/*@egen*/

    t=<ID>/*@bgen(jjtree)*/
    {
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
    }
/*@egen*/
    {jjtn000.setName(t.image); jjtn000.setToken(t);}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void Stmtlst() : {/*@bgen(jjtree) Stmtlst */
  ASTStmtlst jjtn000 = new ASTStmtlst(JJTSTMTLST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stmtlst */
    try {
/*@egen*/

    ( Stmt() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

void Stmt() : {/*@bgen(jjtree) Stmt */
  ASTStmt jjtn000 = new ASTStmt(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Stmt */
  try {
/*@egen*/
  try {
  While()
  | If()
  | LOOKAHEAD(3) Assign()
  | CallStmt()
  } catch(ParseException e) {
    error_control(e, "Stmt", PVIRG);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Assign() : {/*@bgen(jjtree) Assign */
  ASTAssign jjtn000 = new ASTAssign(JJTASSIGN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assign */
  try {
/*@egen*/

  Lhs() <ASSIGN> Rhs() <PVIRG>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void Lhs() : {/*@bgen(jjtree) Lhs */
  ASTLhs jjtn000 = new ASTLhs(JJTLHS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Lhs */
  try {
/*@egen*/

  LOOKAHEAD(<ID>"[") ArrayAccess()
  | ScalarAccess()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void Rhs() : {/*@bgen(jjtree) Rhs */
              ASTRhs jjtn000 = new ASTRhs(JJTRHS);
              boolean jjtc000 = true;
              jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Rhs */
  try {
/*@egen*/

  ( Term() ( ( t=<ARITH_OP>   {jjtn000.setOp(t.image);}
  | t=<BITWISE_OP>   {jjtn000.setOp(t.image);}
  | t=<ADDSUB_OP>   {jjtn000.setOp(t.image);})
  Term() )? )
  | "[" ArraySize() "]"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/


}

void ArraySize() : {/*@bgen(jjtree) ArraySize */
                    ASTArraySize jjtn000 = new ASTArraySize(JJTARRAYSIZE);
                    boolean jjtc000 = true;
                    jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ArraySize */
  try {
/*@egen*/

  ScalarAccess()
  | ( t=<INTEGER>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/  {jjtn000.setName(t.image);} )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void Term() : {/*@bgen(jjtree) Term */
               ASTTerm jjtn000 = new ASTTerm(JJTTERM);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) Term */
  try {
/*@egen*/

  ( t1=<ADDSUB_OP> {jjtn000.setOp(t1.image);} )?
  ( t2=<INTEGER>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.setName(t2.image);}  |LOOKAHEAD(3) Call() |LOOKAHEAD(<ID>"[") ArrayAccess() |
  ScalarAccess() )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void Exprtest() : {/*@bgen(jjtree) Exprtest */
                   ASTExprtest jjtn000 = new ASTExprtest(JJTEXPRTEST);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) Exprtest */
  try {
/*@egen*/
  try {
  <LPAR> Lhs() t=<RELA_OP> {jjtn000.setOp(t.image); } Rhs() <RPAR>
  } catch(ParseException e) {
    error_control(e, "Exprtest", RPAR);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void While() : {/*@bgen(jjtree) While */
  ASTWhile jjtn000 = new ASTWhile(JJTWHILE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) While */
  try {
/*@egen*/
  try {
    <WHILE> Exprtest() <LCHAVETA>
  } catch(ParseException e) {
    error_control(e, "While", LCHAVETA);
  }
  Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void If() : {/*@bgen(jjtree) If */
  ASTIf jjtn000 = new ASTIf(JJTIF);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) If */
    try {
/*@egen*/

    <IF> Exprtest() <LCHAVETA>
  Stmtlst() <RCHAVETA>
  ( <ELSE> <LCHAVETA>
  Stmtlst() <RCHAVETA> )?/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

void Call() : {/*@bgen(jjtree) Call */
               ASTCall jjtn000 = new ASTCall(JJTCALL);
               boolean jjtc000 = true;
               jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) Call */
  try {
/*@egen*/
  t1=<ID> {jjtn000.setId1(t1.image); jjtn000.setToken(t1);}
  ( "." t2=<ID> {jjtn000.setId2(t2.image);} )? <LPAR>
  try {
    ( ArgumentList() )? <RPAR>
  } catch(ParseException e) {
    error_control(e, "Call", RPAR);

  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CallStmt() : {/*@bgen(jjtree) CallStmt */
                   ASTCallStmt jjtn000 = new ASTCallStmt(JJTCALLSTMT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) CallStmt */
  try {
/*@egen*/

  t1=<ID> {jjtn000.setId1(t1.image); jjtn000.setToken(t1);}
  ( "." t2=<ID> {jjtn000.setId2(t2.image);} )? <LPAR>

  try {
      ( ArgumentList() )? <RPAR>
  } catch(ParseException e) {
    error_control(e, "Call", RPAR);
    Token t = getToken(1);

    if(t.kind == LCHAVETA)
      ErrorBlock();

    else if(t.kind == PVIRG)
      getNextToken();
      return;
  }

  <PVIRG>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ArgumentList() : {/*@bgen(jjtree) ArgumentList */
  ASTArgumentList jjtn000 = new ASTArgumentList(JJTARGUMENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ArgumentList */
    try {
/*@egen*/

    Argument() ( <VIRG> Argument() )*/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/

}

void Argument() : {/*@bgen(jjtree) Argument */
                   ASTArgument jjtn000 = new ASTArgument(JJTARGUMENT);
                   boolean jjtc000 = true;
                   jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2, t3;}
{/*@bgen(jjtree) Argument */
  try {
/*@egen*/

  (
      t1=<ID>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
              }
/*@egen*/ {jjtn000.setName(t1.image); jjtn000.setToken(t1);}
    | t2=<STRING>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/ {jjtn000.setString(t2.image); jjtn000.setToken(t2);}
    | t3=<INTEGER>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                   }
/*@egen*/ {jjtn000.setNumber(t3.image); jjtn000.setToken(t3);}
  )/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void ArrayAccess() : {/*@bgen(jjtree) ArrayAccess */
                      ASTArrayAccess jjtn000 = new ASTArrayAccess(JJTARRAYACCESS);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/Token t;}
{/*@bgen(jjtree) ArrayAccess */
  try {
/*@egen*/

  t=<ID>{jjtn000.setName(t.image); jjtn000.setToken(t);} "[" Index() "]"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void ScalarAccess() : {/*@bgen(jjtree) ScalarAccess */
                       ASTScalarAccess jjtn000 = new ASTScalarAccess(JJTSCALARACCESS);
                       boolean jjtc000 = true;
                       jjtree.openNodeScope(jjtn000);
/*@egen*/Token t, size;}
{/*@bgen(jjtree) ScalarAccess */
  try {
/*@egen*/

  t=<ID> ( "." size=<SIZE> {jjtn000.setSize(size.image);} )?/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {jjtn000.setName(t.image); jjtn000.setToken(t);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void Index() : {/*@bgen(jjtree) Index */
                ASTIndex jjtn000 = new ASTIndex(JJTINDEX);
                boolean jjtc000 = true;
                jjtree.openNodeScope(jjtn000);
/*@egen*/Token t1, t2;}
{/*@bgen(jjtree) Index */
  try {
/*@egen*/
  t1=<ID>/*@bgen(jjtree)*/
          {
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
          }
/*@egen*/ {jjtn000.setName(t1.image);  jjtn000.setToken(t1);}
  | t2=<INTEGER>/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                 }
/*@egen*/ {jjtn000.setNumber(t2.image); jjtn000.setToken(t2);}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/

}

void ErrorBlock() : {/*@bgen(jjtree) ErrorBlock */
  ASTErrorBlock jjtn000 = new ASTErrorBlock(JJTERRORBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ErrorBlock */
  try {
/*@egen*/
  <LCHAVETA> Stmtlst() <RCHAVETA>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}